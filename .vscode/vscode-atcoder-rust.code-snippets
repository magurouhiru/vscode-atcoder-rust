{
	// Place your app workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"test head": {
		"scope": "rust",
		"prefix": "test head",
		"body": [
			"use std::process::Command;",
			"",
			"$1"
		],
		"description": "テストファイルの頭に記載する部分。"
	},
	"test body": {
		"scope": "rust",
		"prefix": "test body",
		"body": [
			"#[test]",
			"fn test_{{rplace:test_id}}_{{rplace:test_number}}() {",
			"    let input_raw = r#\"{{rplace:input_raw}}\"#;",
			"    let output_raw = r#\"{{rplace:output_raw}}\"#;",
			"",
			"    let mut cmd = Command::new(\"cargo\");",
			"    cmd.args([\"run\", \"--bin\", \"{{rplace:test_id}}\"])",
			"        .stdin(std::process::Stdio::piped())",
			"        .stdout(std::process::Stdio::piped());",
			"",
			"    let mut child = cmd.spawn().expect(\"Failed to spawn process\");",
			"",
			"    use std::io::Write;",
			"    let stdin = child.stdin.as_mut().expect(\"Failed to open stdin\");",
			"    stdin",
			"        .write_all(input_raw.as_bytes())",
			"        .expect(\"Failed to write to stdin\");",
			"",
			"    let output = child.wait_with_output().expect(\"Failed to read stdout\");",
			"    let stdout = String::from_utf8_lossy(&output.stdout);",
			"",
			"    assert_eq!(stdout, output_raw);",
			"}",
			"",
			"$1"
		],
		"description": "テストファイルの本文を記載する部分。"
	},
	"input S": {
		"scope": "rust",
		"prefix": "i S",
		"body": [
			"use proconio::input;",
			"",
			"fn main() {",
			"    input! {",
			"        s: usize,",
			"    }",
			"",
			"}",
			"$1"
		],
		"description": "Input s: usize,"
	},
	"input N Si": {
		"scope": "rust",
		"prefix": "i N Si",
		"body": [
			"use proconio::input;",
			"",
			"fn main() {",
			"    input! {",
			"        n: usize,",
			"        si: [String; n],",
			"    }",
			"",
			"}",
			"$1"
		],
		"description": "Input n: usize, si: [String; n],"
	},
	"input N M": {
		"scope": "rust",
		"prefix": "i N M",
		"body": [
			"use proconio::input;",
			"",
			"fn main() {",
			"    input! {",
			"        n: usize,",
			"        m: usize,",
			"    }",
			"",
			"}",
			"$1"
		],
		"description": "Input n: usize, m: usize,"
	},
	"input N S T": {
		"scope": "rust",
		"prefix": "i N S T",
		"body": [
			"use proconio::input;",
			"",
			"fn main() {",
			"    input! {",
			"        n: usize,",
			"        s: String,",
			"        t: String,",
			"    }",
			"",
			"}",
			"$1"
		],
		"description": "Input n: usize, s: String, t: String,"
	},
}